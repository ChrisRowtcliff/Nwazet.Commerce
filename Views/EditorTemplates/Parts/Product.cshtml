@using Nwazet.Commerce.Models
@using Nwazet.Commerce.Services
@using Orchard.ContentManagement
@model Nwazet.Commerce.ViewModels.ProductEditorViewModel
<fieldset>
    <label class="sub" for="@Html.IdFor(m => m.Sku)">@T("Sku")</label><br />
    @Html.TextBoxFor(m => m.Sku, new { @class = "text" })<br />
    <label class="sub" for="@Html.IdFor(m => m.Price)">@T("Price")</label><br />
    @Html.TextBoxFor(m => m.Price, new { @class = "text" })

    @if (Model.AllowProductOverrides) {
        @Html.CheckBoxFor(m => m.OverrideTieredPricing)
        <label class="sub" for="@Html.IdFor(m => m.OverrideTieredPricing)">@T("override tiered pricing")</label>
    }
</fieldset>
<fieldset id="NwazetCommerceProduct_PriceTierSection" style="display:@(Model.AllowProductOverrides && Model.OverrideTieredPricing ? "block" : "none");">
    <legend>Tiered Pricing</legend>
    <div class="hint">@T("Quantity is mimimun amount that must be ordered to trigger the price tier.")</div>
    <div class="hint">@T(@"Price can be a fixed amount or a percentage of the base price. ""90%"" makes the tiered price 90% of the base price. ""90"" makes the tiered price $90.")</div>
    <table id="NwazetCommerceProduct_PriceTiers">
        <tr>
            <td>Quantity</td>
            <td>Price</td>
        </tr>
        @{int i = 0;}
        @foreach (var tier in Model.PriceTiers) {
            <tr>
                <td>
                    <input type="hidden" name="NwazetCommerceProduct.PriceTiers.Index" value="@i" />
                    <input type="text" class="text" name="NwazetCommerceProduct.PriceTiers[@i].Quantity" value="@tier.Quantity" />
                </td>
                <td>
                    <input type="text" class="text" name="NwazetCommerceProduct.PriceTiers[@i].Price" value="@tier.Price" />
                </td>
                <td><a href="#" class="nwazet-remove-price-tier">Remove</a></td>
            </tr>

            i++;
        }
    </table>
    <button id="NwazetCommerceProduct_AddPriceTier">Add Price Tier</button>
    @using (Script.Foot()) {
        <script type="text/javascript">
            (function ($) {
                $(function () {
                    $("#@Html.IdFor(m => m.OverrideTieredPricing)").click(function () {
                        $("#NwazetCommerceProduct_PriceTierSection").toggle();
                    });

                    $("#NwazetCommerceProduct_AddPriceTier").click(function (event) {
                        event.preventDefault();
                        var rowId = (new Date()).getTime();
                        $("#NwazetCommerceProduct_PriceTiers").append('<tr><td><input type="hidden" name="NwazetCommerceProduct.PriceTiers.Index" value="' + rowId + '" /><input type="text" class="text" name="NwazetCommerceProduct.PriceTiers[' + rowId + '].Quantity" value="" /></td><td><input type="text" class="text" name="NwazetCommerceProduct.PriceTiers[' + rowId + '].Price" value="" /></td><td><a href="#" class="nwazet-remove-price-tier">Remove</a></td></tr>');
                    });

                    $("#NwazetCommerceProduct_PriceTiers").on("click", ".nwazet-remove-price-tier", function (event) {
                        event.preventDefault();
                        $(this).parents("tr").remove();
                    });
                });
            })(jQuery);
        </script>
    }
</fieldset>
<fieldset>
    <label class="sub" for="@Html.IdFor(m => m.Inventory)">@T("Inventory")</label>
    @if (Model.Part.Has<BundlePart>()) {
        <text>: @Model.Inventory</text>
    }
    else {
        <br />@Html.TextBoxFor(m => m.Inventory, new { @class = "text" })
    }<br />
    <label class="sub" for="@Html.IdFor(m => m.OutOfStockMessage)">@T("Out of stock message")</label><br />
    @Html.TextBoxFor(m => m.OutOfStockMessage, new { @class = "text-medium" })<br />
    <span class="hint">@T("This message will be displayed if the inventory is zero or less. Leave blank for the default message to be used.")</span>
    @Html.CheckBoxFor(m => m.AllowBackOrder)
    <label class="sub" for="@Html.IdFor(m => m.AllowBackOrder)">@T("allow back order")</label><br />
    <span class="hint">@T("If unchecked, the add button won't be visible on the product page when the inventory is zero or less.")</span>
</fieldset>
<fieldset>
    <label class="sub" for="@Html.IdFor(m => m.Weight)">@T("Weight")</label><br />
    @Html.TextBoxFor(m => m.Weight, new { @class = "text" })<br />
    <label class="sub" for="@Html.IdFor(m => m.Size)">@T("Size")</label><br/>
    @{
        // Attempt to get size-based shipping methods through WCA so we do it late and we don't fail if the feature is not enabled
        var shippingMethods = WorkContext.Resolve<IEnumerable<IShippingMethodProvider>>();
        if (shippingMethods != null) {
            var sizes = shippingMethods
                .Where(m => m.GetType() == typeof (SizeBasedShippingMethodProvider))
                .SelectMany(m => m.GetShippingMethods().Cast<SizeBasedShippingMethodPart>().Select(p => p.Size))
                .Distinct()
                .OrderBy(s => s)
                .ToList();
            @Html.DropDownList("SizeHelper", sizes.Select(s => new SelectListItem {Text = s, Value = s}))
            using (Script.Foot()) {
                <script type="text/javascript">
                    (function ($) {
                        $(function () {
                            var helper = $("#NwazetCommerceProduct_SizeHelper").change(function () {
                                $("#NwazetCommerceProduct_Size").val(helper.val());
                            });
                        });
                    })(jQuery);
                </script>
            }
        }
    }
    @Html.TextBoxFor(m => m.Size, new { @class = "text" })<br />
    <label class="sub" for="@Html.IdFor(m => m.ShippingCost)">@T("Shipping Cost")</label><br />
    @Html.TextBoxFor(m => m.ShippingCost, new { @class = "text" })<br />
    <span class="hint">@T("Specify a shipping cost if you want the shipping cost to be fixed. Otherwise, leave this empty and only specify the weight. The shipping will be computed based on the shipping provider that the customer will pick.")</span>
</fieldset>
<fieldset>
    @Html.CheckBoxFor(m => m.IsDigital)
    <label class="sub" for="@Html.IdFor(m => m.IsDigital)">@T("digital product")</label>
</fieldset>